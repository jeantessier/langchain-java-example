/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example;

import com.google.inject.Guice;
import dev.langchain4j.model.chat.ChatLanguageModel;
import io.github.cdimascio.dotenv.Dotenv;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;

import java.util.stream.Stream;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.params.provider.Arguments.arguments;

class AppTest {
    static final Dotenv dotenv = Dotenv.load();

    static Stream<Arguments> dataProvider() {
        return Stream.of(
                arguments("openai", new OpenAiModule()),
                arguments("anthropic", new AnthropicModule())
        );
    }

    @DisplayName("with chat model")
    @ParameterizedTest(name="should have a greeting with model {0} ")
    @MethodSource("dataProvider")
    void appWithChatModel(String variation, com.google.inject.Module aiModule) {
        // Given
        var injector = Guice.createInjector(new DotenvModule(), aiModule);
        var sut = injector.getInstance(App.class);

        // When
        var actualGreeting = sut.getGreeting();

        // Then
        assertNotNull(actualGreeting, "app should have a greeting");
    }
}
